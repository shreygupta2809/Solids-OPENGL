#include "ball.h"
#include "main.h"

Ball::Ball(float x, float y, float z, int indexSolid)
{
    this->position = glm::vec3(x, y, z);
    this->rotation = 0;
    isRotate = 0;
    speed = 1;

    if (indexSolid == 1)
    {
        // static const GLfloat vertex_buffer_data[] = {
        //     1.500000, 0.000000, 0.0, 0.0f, 1.0f, 0.0f,   // 0
        //     1.261880, 0.810961, 0.0, 1.0f, 1.0f, 0.0f,   // 1
        //     0.623123, 1.364448, 0.0, 1.0f, 0.0f, 0.0f,   // 2
        //     -0.213472, 1.484732, 0.0, 0.0f, 1.0f, 1.0f,  // 3
        //     -0.982291, 1.133624, 0.0, 0.0f, 0.0f, 1.0f,  // 4
        //     -1.439239, 0.422599, 0.0, 1.0f, 0.0f, 1.0f,  // 5
        //     -1.439239, -0.422599, 0.0, 1.0f, 1.0f, 0.0f, // 6
        //     -0.982291, -1.133624, 0.0, 0.0f, 1.0f, 0.0f, // 7
        //     -0.213472, -1.484732, 0.0, 1.0f, 0.0f, 0.0f, // 8
        //     0.623123, -1.364448, 0.0, 0.0f, 1.0f, 1.0f,  // 9
        //     1.261880, -0.810961, 0.0, 0.0f, 0.0f, 1.0f,  // 10
        //     0.0, 0.0, 0.0, 1.0f, 1.0f, 1.0f,             // 11
        //     0.0, 0.0, 1.0, 0.0f, 1.0f, 0.0f,             // 12
        // };

        // unsigned int index_buffer_data[] = {
        //     0, 11, 1,
        //     1, 11, 2,
        //     2, 11, 3,
        //     3, 11, 4,
        //     4, 11, 5,
        //     5, 11, 6,
        //     6, 11, 7,
        //     7, 11, 8,
        //     8, 11, 9,
        //     9, 11, 10,
        //     10, 11, 0,
        //     0, 12, 1,
        //     1, 12, 2,
        //     2, 12, 3,
        //     3, 12, 4,
        //     4, 12, 5,
        //     5, 12, 6,
        //     6, 12, 7,
        //     7, 12, 8,
        //     8, 12, 9,
        //     9, 12, 10,
        //     10, 12, 0};

        static const GLfloat vertex_buffer_data[] = {
            1.500000, 0.000000, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            1.261880, 0.810961, 0.0, 1.0f, 0.0f, 0.0f,
            1.261880, 0.810961, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            0.623123, 1.364448, 0.0, 1.0f, 0.0f, 0.0f,
            0.623123, 1.364448, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            -0.213472, 1.484732, 0.0, 1.0f, 0.0f, 0.0f,
            -0.213472, 1.484732, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            -0.982291, 1.133624, 0.0, 1.0f, 0.0f, 0.0f,
            -0.982291, 1.133624, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            -1.439239, 0.422599, 0.0, 1.0f, 0.0f, 0.0f,
            -1.439239, 0.422599, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            -1.439239, -0.422599, 0.0, 1.0f, 0.0f, 0.0f,
            -1.439239, -0.422599, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            -0.982291, -1.133624, 0.0, 1.0f, 0.0f, 0.0f,
            -0.982291, -1.133624, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            -0.213472, -1.484732, 0.0, 1.0f, 0.0f, 0.0f,
            -0.213472, -1.484732, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            0.623123, -1.364448, 0.0, 1.0f, 0.0f, 0.0f,
            0.623123, -1.364448, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            1.261880, -0.810961, 0.0, 1.0f, 0.0f, 0.0f,
            1.261880, -0.810961, 0.0, 1.0f, 0.0f, 0.0f,
            0.0, 0.0, 0.0, 1.0f, 0.0f, 0.0f,
            1.500000, 0.000000, 0.0, 1.0f, 0.0f, 0.0f,

            1.500000, 0.000000, 0.0, 0.0f, 1.0f, 0.0f,
            0.0, 0.0, 1.0, 0.0f, 1.0f, 0.0f,
            1.261880, 0.810961, 0.0, 0.0f, 1.0f, 0.0f,

            1.261880, 0.810961, 0.0, 0.0f, 0.0f, 1.0f,
            0.0, 0.0, 1.0, 0.0f, 0.0f, 1.0f,
            0.623123, 1.364448, 0.0, 0.0f, 0.0f, 1.0f,

            0.623123, 1.364448, 0.0, 1.0f, 1.0f, 0.0f,
            0.0, 0.0, 1.0, 1.0f, 1.0f, 0.0f,
            -0.213472, 1.484732, 0.0, 1.0f, 1.0f, 0.0f,

            -0.213472, 1.484732, 0.0, 0.0f, 1.0f, 1.0f,
            0.0, 0.0, 1.0, 0.0f, 1.0f, 1.0f,
            -0.982291, 1.133624, 0.0, 0.0f, 1.0f, 1.0f,

            -0.982291, 1.133624, 0.0, 1.0f, 0.0f, 1.0f,
            0.0, 0.0, 1.0, 1.0f, 0.0f, 1.0f,
            -1.439239, 0.422599, 0.0, 1.0f, 0.0f, 1.0f,

            -1.439239, 0.422599, 0.0, 0.5f, 0.0f, 0.0f,
            0.0, 0.0, 1.0, 0.5f, 0.0f, 0.0f,
            -1.439239, -0.422599, 0.0, 0.5f, 0.0f, 0.0f,

            -1.439239, -0.422599, 0.0, 0.0f, 0.5f, 0.0f,
            0.0, 0.0, 1.0, 0.0f, 0.5f, 0.0f,
            -0.982291, -1.133624, 0.0, 0.0f, 0.5f, 0.0f,

            -0.982291, -1.133624, 0.0, 0.0f, 0.0f, 0.5f,
            0.0, 0.0, 1.0, 0.0f, 0.0f, 0.5f,
            -0.213472, -1.484732, 0.0, 0.0f, 0.0f, 0.5f,

            -0.213472, -1.484732, 0.0, 0.5f, 0.5f, 0.0f,
            0.0, 0.0, 1.0, 0.5f, 0.5f, 0.0f,
            0.623123, -1.364448, 0.0, 0.5f, 0.5f, 0.0f,

            0.623123, -1.364448, 0.0, 0.5f, 0.0f, 0.5f,
            0.0, 0.0, 1.0, 0.5f, 0.0f, 0.5f,
            1.261880, -0.810961, 0.0, 0.5f, 0.0f, 0.5f,

            1.261880, -0.810961, 0.0, 0.0f, 0.5f, 0.5f,
            0.0, 0.0, 1.0, 0.0f, 0.5f, 0.5f,
            1.500000, 0.000000, 0.0, 0.0f, 0.5f, 0.5f};

        // this->object = create3DObject(GL_TRIANGLES, 13, 22, vertex_buffer_data, index_buffer_data, GL_FILL);
        this->object = create3DObject(GL_TRIANGLES, (11 * 1 + 1 * 11) * 3, vertex_buffer_data, GL_FILL);
    }
    else if (indexSolid == 2)
    {

        const float r = 1.0f;
        const float h = 1.0f;
        const float r2 = r / 2;
        const float r3 = r2 * sqrt(3);

        // static const GLfloat vertex_buffer_data[] = {
        //     r, 0, 0, 0.0f, 0.0f, 1.0f,     // 0
        //     r2, r3, 0, 0.0f, 1.0f, 0.0f,   // 1
        //     -r2, r3, 0, 0.0f, 1.0f, 1.0f,  // 2
        //     -r, 0, 0, 1.0f, 0.0f, 0.0f,    // 3
        //     -r2, -r3, 0, 1.0f, 0.0f, 1.0f, // 4
        //     r2, -r3, 0, 1.0f, 1.0f, 0.0f,  // 5
        //     0, 0, h, 1.0f, 1.0f, 1.0f,     // 6
        //     0, 0, -h, 1.0f, 1.0f, 1.0f,    // 7
        // };

        // unsigned int index_buffer_data[] = {
        //     0, 6, 1,
        //     1, 6, 2,
        //     2, 6, 3,
        //     3, 6, 4,
        //     4, 6, 5,
        //     5, 6, 0,
        //     0, 7, 1,
        //     1, 7, 2,
        //     2, 7, 3,
        //     3, 7, 4,
        //     4, 7, 5,
        //     5, 7, 0
        // };

        static const GLfloat vertex_buffer_data[] = {
            r, 0, 0, 1.0f, 0.0f, 0.0f,
            0, 0, h, 1.0f, 0.0f, 0.0f,
            r2, r3, 0, 1.0f, 0.0f, 0.0f,

            r2, r3, 0, 0.0f, 1.0f, 0.0f,
            0, 0, h, 0.0f, 1.0f, 0.0f,
            -r2, r3, 0, 0.0f, 1.0f, 0.0f,

            -r2, r3, 0, 0.0f, 0.0f, 1.0f,
            0, 0, h, 0.0f, 0.0f, 1.0f,
            -r, 0, 0, 0.0f, 0.0f, 1.0f,

            -r, 0, 0, 0.0f, 1.0f, 1.0f,
            0, 0, h, 0.0f, 1.0f, 1.0f,
            -r2, -r3, 0, 0.0f, 1.0f, 1.0f,

            -r2, -r3, 0, 1.0f, 0.0f, 1.0f,
            0, 0, h, 1.0f, 0.0f, 1.0f,
            r2, -r3, 0, 1.0f, 0.0f, 1.0f,

            r2, -r3, 0, 1.0f, 1.0f, 0.0f,
            0, 0, h, 1.0f, 1.0f, 0.0f,
            r, 0, 0, 1.0f, 1.0f, 0.0f,

            r, 0, 0, 1.0f, 1.0f, 1.0f,
            0, 0, -h, 1.0f, 1.0f, 1.0f,
            r2, r3, 0, 1.0f, 1.0f, 1.0f,

            r2, r3, 0, 0.0f, 0.0f, 0.5f,
            0, 0, -h, 0.0f, 0.0f, 0.5f,
            -r2, r3, 0, 0.0f, 0.0f, 0.5f,

            -r2, r3, 0, 0.0f, 0.5f, 0.0f,
            0, 0, -h, 0.0f, 0.5f, 0.0f,
            -r, 0, 0, 0.0f, 0.5f, 0.0f,

            -r, 0, 0, 0.5f, 0.0f, 0.0f,
            0, 0, -h, 0.5f, 0.0f, 0.0f,
            -r2, -r3, 0, 0.5f, 0.0f, 0.0f,

            -r2, -r3, 0, 0.5f, 0.5f, 0.0f,
            0, 0, -h, 0.5f, 0.5f, 0.0f,
            r2, -r3, 0, 0.5f, 0.5f, 0.0f,

            r2, -r3, 0, 0.0f, 0.5f, 0.5f,
            0, 0, -h, 0.0f, 0.5f, 0.5f,
            r, 0, 0, 0.0f, 0.5f, 0.5f};

        // this->object = create3DObject(GL_TRIANGLES, 8, 12, vertex_buffer_data, index_buffer_data, GL_FILL);
        this->object = create3DObject(GL_TRIANGLES, 12 * 1 * 3, vertex_buffer_data, GL_FILL);
    }
    else if (indexSolid == 3)
    {

        // static const GLfloat vertex_buffer_data[] = {
        //     0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 1.0f,    // 0
        //     -0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 1.0f,   // 1
        //     -0.5f, 0.5f, -0.5f, 1.0f, 1.0f, 0.0f,  // 2
        //     0.5f, 0.5f, -0.5f, 1.0f, 0.0f, 0.0f,   // 3
        //     0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 1.0f,   // 4
        //     -0.5f, -0.5f, 0.5f, 0.0f, 1.0f, 0.0f,  // 5
        //     -0.5f, -0.5f, -0.5f, 0.0f, 1.0f, 1.0f, // 6
        //     0.5f, -0.5f, -0.5f, 1.0f, 1.0f, 1.0f,  // 7
        //     0, 1.5f, 0, 1.0f, 1.0f, 0.0f,          // 8
        //     0, -1.5f, 0, 0.0f, 0.0f, 1.0f,         // 9
        // };

        // unsigned int index_buffer_data[] = {
        //     0, 8, 1,
        //     1, 8, 2,
        //     2, 8, 3,
        //     3, 8, 0,
        //     4, 9, 5,
        //     5, 9, 6,
        //     6, 9, 7,
        //     7, 9, 4,

        //     0, 1, 4,
        //     1, 4, 5,

        //     0, 3, 4,
        //     3, 4, 7,

        //     3, 2, 7,
        //     2, 7, 6,

        //     1, 2, 5,
        //     2, 5, 6};

        static const GLfloat vertex_buffer_data[] = {
            0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f,
            0, 1.5f, 0, 1.0f, 0.0f, 0.0f,
            -0.5f, 0.5f, 0.5f, 1.0f, 0.0f, 0.0f,

            -0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 1.0f,
            0, 1.5f, 0, 0.0f, 0.0f, 1.0f,
            -0.5f, 0.5f, -0.5f, 0.0f, 0.0f, 1.0f,

            -0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 0.0f,
            0, 1.5f, 0, 0.0f, 1.0f, 0.0f,
            0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 0.0f,

            0.5f, 0.5f, -0.5f, 0.0f, 1.0f, 1.0f,
            0, 1.5f, 0, 0.0f, 1.0f, 1.0f,
            0.5f, 0.5f, 0.5f, 0.0f, 1.0f, 1.0f,

            0.5f, -0.5f, 0.5f, 1.0f, 1.0f, 0.0f,
            0, -1.5f, 0, 1.0f, 1.0f, 0.0f,
            -0.5f, -0.5f, 0.5f, 1.0f, 1.0f, 0.0f,

            -0.5f, -0.5f, 0.5f, 1.0f, 0.0f, 1.0f,
            0, -1.5f, 0, 1.0f, 0.0f, 1.0f,
            -0.5f, -0.5f, -0.5f, 1.0f, 0.0f, 1.0f,

            -0.5f, -0.5f, -0.5f, 0.5f, 0.0f, 0.5f,
            0, -1.5f, 0, 0.5f, 0.0f, 0.5f,
            0.5f, -0.5f, -0.5f, 0.5f, 0.0f, 0.5f,

            0.5f, -0.5f, -0.5f, 0.5f, 0.0f, 0.0f,
            0, -1.5f, 0, 0.5f, 0.0f, 0.0f,
            0.5f, -0.5f, 0.5f, 0.5f, 0.0f, 0.0f,

            0.5f, 0.5f, 0.5f, 0.0f, 0.5f, 0.0f,
            -0.5f, 0.5f, 0.5f, 0.0f, 0.5f, 0.0f,
            0.5f, -0.5f, 0.5f, 0.0f, 0.5f, 0.0f,
            -0.5f, 0.5f, 0.5f, 0.0f, 0.5f, 0.0f,
            0.5f, -0.5f, 0.5f, 0.0f, 0.5f, 0.0f,
            -0.5f, -0.5f, 0.5f, 0.0f, 0.5f, 0.0f,

            0.5f, 0.5f, 0.5f, 0.0f, 0.0f, 0.5f,
            0.5f, 0.5f, -0.5f, 0.0f, 0.0f, 0.5f,
            0.5f, -0.5f, 0.5f, 0.0f, 0.0f, 0.5f,
            0.5f, 0.5f, -0.5f, 0.0f, 0.0f, 0.5f,
            0.5f, -0.5f, 0.5f, 0.0f, 0.0f, 0.5f,
            0.5f, -0.5f, -0.5f, 0.0f, 0.0f, 0.5f,

            0.5f, 0.5f, -0.5f, 0.5f, 0.5f, 0.0f,
            -0.5f, 0.5f, -0.5f, 0.5f, 0.5f, 0.0f,
            0.5f, -0.5f, -0.5f, 0.5f, 0.5f, 0.0f,
            -0.5f, 0.5f, -0.5f, 0.5f, 0.5f, 0.0f,
            0.5f, -0.5f, -0.5f, 0.5f, 0.5f, 0.0f,
            -0.5f, -0.5f, -0.5f, 0.5f, 0.5f, 0.0f,

            -0.5f, 0.5f, 0.5f, 0.0f, 0.5f, 0.5f,
            -0.5f, 0.5f, -0.5f, 0.0f, 0.5f, 0.5f,
            -0.5f, -0.5f, 0.5f, 0.0f, 0.5f, 0.5f,
            -0.5f, 0.5f, -0.5f, 0.0f, 0.5f, 0.5f,
            -0.5f, -0.5f, 0.5f, 0.0f, 0.5f, 0.5f,
            -0.5f, -0.5f, -0.5f, 0.0f, 0.5f, 0.5f};

        // this->object = create3DObject(GL_TRIANGLES, 10, 16, vertex_buffer_data, index_buffer_data, GL_FILL);
        this->object = create3DObject(GL_TRIANGLES, (4 * 2 + 8) * 3, vertex_buffer_data, GL_FILL);
    }
    else if (indexSolid == 4)
    {
        const float phi = (1 + sqrt(5)) / 2;
        // static const GLfloat vertex_buffer_data[] = {
        //     phi, phi, phi, 1.0f, 0.0f, 0.0f,
        //     phi, phi, -phi, 1.0f, 0.0f, 0.0f,
        //     phi, -phi, phi, 1.0f, 0.0f, 0.0f,
        //     -phi, phi, phi, 1.0f, 0.0f, 0.0f,
        //     phi, -phi, -phi, 1.0f, 0.0f, 0.0f,
        //     -phi, phi, -phi, 1.0f, 0.0f, 0.0f,
        //     -phi, -phi, phi, 1.0f, 0.0f, 0.0f,
        //     phi, phi, phi, 1.0f, 0.0f, 0.0f,
        //     0, (phi * phi), 1, 1.0f, 0.0f, 0.0f,
        //     0, -(phi * phi), 1, 1.0f, 0.0f, 0.0f,
        //     0, (phi * phi), -1, 1.0f, 0.0f, 0.0f,
        //     0, -(phi * phi), -1, 1.0f, 0.0f, 0.0f,
        //     (phi * phi), 1, 0, 1.0f, 0.0f, 0.0f,
        //     -(phi * phi), 1, 0, 1.0f, 0.0f, 0.0f,
        //     (phi * phi), -1, 0, 1.0f, 0.0f, 0.0f,
        //     -(phi * phi), -1, 0, 1.0f, 0.0f, 0.0f,
        //     1, 0, (phi * phi), 1.0f, 0.0f, 0.0f,
        //     1, 0, -(phi * phi), 1.0f, 0.0f, 0.0f,
        //     -1, 0, (phi * phi), 1.0f, 0.0f, 0.0f,
        //     -1, 0, -(phi * phi), 1.0f, 0.0f, 0.0f,
        // };

        // static const GLfloat vertex_buffer_data[] = {
        //     1, 1, 1, 1.0f, 0.0f, 0.0f,           // 0
        //     1, 1, -1, 0.0f, 1.0f, 0.0f,          // 1
        //     1, -1, 1, 0.0f, 0.0f, 1.0f,          // 2
        //     -1, 1, 1, 0.0f, 0.0f, 1.0f,          // 3
        //     1, -1, -1, 0.0f, 1.0f, 0.0f,         //4
        //     -1, 1, -1, 1.0f, 0.0f, 0.0f,         // 5
        //     -1, -1, 1, 0.0f, 1.0f, 0.0f,         // 6
        //     -1, -1, -1, 0.0f, 0.0f, 1.0f,        // 7
        //     0, 1 / phi, phi, 0.0f, 1.0f, 0.0f,   // 8
        //     0, -1 / phi, phi, 0.0f, 0.0f, 1.0f,  // 9
        //     0, 1 / phi, -phi, 1.0f, 0.0f, 0.0f,  // 10
        //     0, -1 / phi, -phi, 0.0f, 1.0f, 0.0f, // 11
        //     1 / phi, phi, 0, 0.0f, 0.0f, 1.0f,   // 12
        //     -1 / phi, phi, 0, 1.0f, 0.0f, 0.0f,  // 13
        //     1 / phi, -phi, 0, 0.0f, 1.0f, 0.0f,  // 14
        //     -1 / phi, -phi, 0, 0.0f, 0.0f, 1.0f, // 15
        //     phi, 0, 1 / phi, 0.0f, 1.0f, 0.0f,   // 16
        //     phi, 0, -1 / phi, 1.0f, 0.0f, 0.0f,  // 17
        //     -phi, 0, 1 / phi, 0.0f, 0.0f, 0.0f,  // 18
        //     -phi, 0, -1 / phi, 0.0f, 1.0f, 0.0f, // 19
        // };

        // unsigned int index_buffer_data[] = {
        //     8, 0, 16,
        //     8, 16, 2,
        //     8, 2, 9,

        //     2, 16, 17,
        //     2, 17, 4,
        //     2, 4, 14,

        //     0, 12, 16,
        //     12, 16, 1,
        //     16, 1, 17,

        //     9, 2, 14,
        //     9, 14, 15,
        //     9, 15, 6,

        //     14, 4, 11,
        //     14, 11, 7,
        //     14, 7, 15,

        //     10, 1, 17,
        //     10, 17, 4,
        //     10, 4, 11,

        //     13, 12, 1,
        //     13, 1, 10,
        //     13, 10, 5,

        //     19, 5, 10,
        //     19, 10, 11,
        //     19, 11, 7,

        //     3, 8, 0,
        //     3, 0, 12,
        //     3, 12, 13,

        //     18, 6, 15,
        //     18, 15, 7,
        //     18, 7, 19,

        //     18, 19, 5,
        //     18, 5, 13,
        //     18, 13, 3,

        //     3, 18, 6,
        //     3, 6, 9,
        //     3, 9, 8};

        static const GLfloat vertex_buffer_data[] = {
            0, 1 / phi, phi, 1.0f, 0.0f, 0.0f,
            1, 1, 1, 1.0f, 0.0f, 0.0f,
            phi, 0, 1 / phi, 1.0f, 0.0f, 0.0f,
            0, 1 / phi, phi, 1.0f, 0.0f, 0.0f,
            phi, 0, 1 / phi, 1.0f, 0.0f, 0.0f,
            1, -1, 1, 1.0f, 0.0f, 0.0f,
            0, 1 / phi, phi, 1.0f, 0.0f, 0.0f,
            1, -1, 1, 1.0f, 0.0f, 0.0f,
            0, -1 / phi, phi, 1.0f, 0.0f, 0.0f,

            1, -1, 1, 1.0f, 0.0f, 1.0f,
            phi, 0, 1 / phi, 1.0f, 0.0f, 1.0f,
            phi, 0, -1 / phi, 1.0f, 0.0f, 1.0f,
            1, -1, 1, 1.0f, 0.0f, 1.0f,
            phi, 0, -1 / phi, 1.0f, 0.0f, 1.0f,
            1, -1, -1, 1.0f, 0.0f, 1.0f,
            1, -1, 1, 1.0f, 0.0f, 1.0f,
            1, -1, -1, 1.0f, 0.0f, 1.0f,
            1 / phi, -phi, 0, 1.0f, 0.0f, 1.0f,

            1, 1, 1, 1.0f, 1.0f, 1.0f,
            1 / phi, phi, 0, 1.0f, 1.0f, 1.0f,
            phi, 0, 1 / phi, 1.0f, 1.0f, 1.0f,
            1 / phi, phi, 0, 1.0f, 1.0f, 1.0f,
            phi, 0, 1 / phi, 1.0f, 1.0f, 1.0f,
            1, 1, -1, 1.0f, 1.0f, 1.0f,
            phi, 0, 1 / phi, 1.0f, 1.0f, 1.0f,
            1, 1, -1, 1.0f, 1.0f, 1.0f,
            phi, 0, -1 / phi, 1.0f, 1.0f, 1.0f,

            0, -1 / phi, phi, 1.0f, 1.0f, 0.0f,
            1, -1, 1, 1.0f, 1.0f, 0.0f,
            1 / phi, -phi, 0, 1.0f, 1.0f, 0.0f,
            0, -1 / phi, phi, 1.0f, 1.0f, 0.0f,
            1 / phi, -phi, 0, 1.0f, 1.0f, 0.0f,
            -1 / phi, -phi, 0, 1.0f, 1.0f, 0.0f,
            0, -1 / phi, phi, 1.0f, 1.0f, 0.0f,
            -1 / phi, -phi, 0, 1.0f, 1.0f, 0.0f,
            -1, -1, 1, 1.0f, 1.0f, 0.0f,

            1 / phi, -phi, 0, 0.0f, 0.0f, 1.0f,
            1, -1, -1, 0.0f, 0.0f, 1.0f,
            0, -1 / phi, -phi, 0.0f, 0.0f, 1.0f,
            1 / phi, -phi, 0, 0.0f, 0.0f, 1.0f,
            0, -1 / phi, -phi, 0.0f, 0.0f, 1.0f,
            -1, -1, -1, 0.0f, 0.0f, 1.0f,
            1 / phi, -phi, 0, 0.0f, 0.0f, 1.0f,
            -1, -1, -1, 0.0f, 0.0f, 1.0f,
            -1 / phi, -phi, 0, 0.0f, 0.0f, 1.0f,

            0, 1 / phi, -phi, 0.0f, 1.0f, 1.0f,
            1, 1, -1, 0.0f, 1.0f, 1.0f,
            phi, 0, -1 / phi, 0.0f, 1.0f, 1.0f,
            0, 1 / phi, -phi, 0.0f, 1.0f, 1.0f,
            phi, 0, -1 / phi, 0.0f, 1.0f, 1.0f,
            1, -1, -1, 0.0f, 1.0f, 1.0f,
            0, 1 / phi, -phi, 0.0f, 1.0f, 1.0f,
            1, -1, -1, 0.0f, 1.0f, 1.0f,
            0, -1 / phi, -phi, 0.0f, 1.0f, 1.0f,

            -1 / phi, phi, 0, 0.0f, 1.0f, 0.0f,
            1 / phi, phi, 0, 0.0f, 1.0f, 0.0f,
            1, 1, -1, 0.0f, 1.0f, 0.0f,
            -1 / phi, phi, 0, 0.0f, 1.0f, 0.0f,
            1, 1, -1, 0.0f, 1.0f, 0.0f,
            0, 1 / phi, -phi, 0.0f, 1.0f, 0.0f,
            -1 / phi, phi, 0, 0.0f, 1.0f, 0.0f,
            0, 1 / phi, -phi, 0.0f, 1.0f, 0.0f,
            -1, 1, -1, 0.0f, 1.0f, 0.0f,

            -phi, 0, -1 / phi, 0.5f, 0.0f, 0.0f,
            -1, 1, -1, 0.5f, 0.0f, 0.0f,
            0, 1 / phi, -phi, 0.5f, 0.0f, 0.0f,
            -phi, 0, -1 / phi, 0.5f, 0.0f, 0.0f,
            0, 1 / phi, -phi, 0.5f, 0.0f, 0.0f,
            0, -1 / phi, -phi, 0.5f, 0.0f, 0.0f,
            -phi, 0, -1 / phi, 0.5f, 0.0f, 0.0f,
            0, -1 / phi, -phi, 0.5f, 0.0f, 0.0f,
            -1, -1, -1, 0.5f, 0.0f, 0.0f,

            -1, 1, 1, 0.5f, 0.0f, 0.5f,
            0, 1 / phi, phi, 0.5f, 0.0f, 0.5f,
            1, 1, 1, 0.5f, 0.0f, 0.5f,
            -1, 1, 1, 0.5f, 0.0f, 0.5f,
            1, 1, 1, 0.5f, 0.0f, 0.5f,
            1 / phi, phi, 0, 0.5f, 0.0f, 0.5f,
            -1, 1, 1, 0.5f, 0.0f, 0.5f,
            1 / phi, phi, 0, 0.5f, 0.0f, 0.5f,
            -1 / phi, phi, 0, 0.5f, 0.0f, 0.5f,

            -phi, 0, 1 / phi, 0.0f, 0.5f, 0.0f,
            -1, -1, 1, 0.0f, 0.5f, 0.0f,
            -1 / phi, -phi, 0, 0.0f, 0.5f, 0.0f,
            -phi, 0, 1 / phi, 0.0f, 0.5f, 0.0f,
            -1 / phi, -phi, 0, 0.0f, 0.5f, 0.0f,
            -1, -1, -1, 0.0f, 0.5f, 0.0f,
            -phi, 0, 1 / phi, 0.0f, 0.5f, 0.0f,
            -1, -1, -1, 0.0f, 0.5f, 0.0f,
            -phi, 0, -1 / phi, 0.0f, 0.5f, 0.0f,

            -phi, 0, 1 / phi, 0.0f, 0.0f, 0.5f,
            -phi, 0, -1 / phi, 0.0f, 0.0f, 0.5f,
            -1, 1, -1, 0.0f, 0.0f, 0.5f,
            -phi, 0, 1 / phi, 0.0f, 0.0f, 0.5f,
            -1, 1, -1, 0.0f, 0.0f, 0.5f,
            -1 / phi, phi, 0, 0.0f, 0.0f, 0.5f,
            -phi, 0, 1 / phi, 0.0f, 0.0f, 0.5f,
            -1 / phi, phi, 0, 0.0f, 0.0f, 0.5f,
            -1, 1, 1, 0.0f, 0.0f, 0.5f,

            -1, 1, 1, 0.0f, 0.5f, 0.5f,
            -phi, 0, 1 / phi, 0.0f, 0.5f, 0.5f,
            -1, -1, 1, 0.0f, 0.5f, 0.5f,
            -1, 1, 1, 0.0f, 0.5f, 0.5f,
            -1, -1, 1, 0.0f, 0.5f, 0.5f,
            0, -1 / phi, phi, 0.0f, 0.5f, 0.5f,
            -1, 1, 1, 0.0f, 0.5f, 0.5f,
            0, -1 / phi, phi, 0.0f, 0.5f, 0.5f,
            0, 1 / phi, phi, 0.0f, 0.5f, 0.5f};

        // this->object = create3DObject(GL_TRIANGLES, 20, 36, vertex_buffer_data, index_buffer_data, GL_FILL);
        this->object = create3DObject(GL_TRIANGLES, 12 * 3 * 3, vertex_buffer_data, GL_FILL);
    }
}

void Ball::draw(glm::mat4 VP)
{
    Matrices.model = glm::mat4(1.0f);
    glm::mat4 translate = glm::translate(this->position); // glTranslatef
    glm::mat4 rotate = glm::rotate((float)(this->rotation * M_PI / 180.0f), glm::vec3(1, 0, 0));
    // No need as coords centered at 0, 0, 0 of cube arouund which we waant to rotate
    // rotate          = rotate * glm::translate(glm::vec3(0, -0.6, 0));
    Matrices.model *= (translate * rotate);
    glm::mat4 MVP = VP * Matrices.model;
    glUniformMatrix4fv(Matrices.MatrixID, 1, GL_FALSE, &MVP[0][0]);
    draw3DObject(this->object);
}

void Ball::set_position(float x, float y, float z)
{
    this->position = glm::vec3(x, y, z);
}

void Ball::tick()
{
    this->rotation += speed;
    // this->position.x -= speed;
    // this->position.y -= speed;
}
